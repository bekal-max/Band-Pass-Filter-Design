-- -------------------------------------------------------------
--
-- Module: filter
-- Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
-- Generated on: 2020-08-19 17:05:14
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: C:\Users\Kal\Desktop\BANDPASS\Last
-- TestBenchStimulus: impulse step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 16
-- Stable            : Yes
-- Linear Phase      : Yes (Type 2)
-- Arithmetic        : fixed
-- Numerator         : s8,9 -> [-2.500000e-01 2.500000e-01)
-- Input             : s8,7 -> [-1 1)
-- Filter Internals  : Specify Precision
--   Output          : s16,15 -> [-1 1)
--   Product         : s16,15 -> [-1 1)
--   Accumulator     : s18,16 -> [-2 2)
--   Round Mode      : floor
--   Overflow Mode   : saturate
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(7 DOWNTO 0); -- sfix8_En7
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
         );

END filter;


----------------------------------------------------------------
--Module Architecture: filter
----------------------------------------------------------------
ARCHITECTURE rtl OF filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(7 DOWNTO 0); -- sfix8_En7
  -- Constants
  CONSTANT coeff1                         : signed(7 DOWNTO 0) := to_signed(18, 8); -- sfix8_En9
  CONSTANT coeff2                         : signed(7 DOWNTO 0) := to_signed(-27, 8); -- sfix8_En9
  CONSTANT coeff3                         : signed(7 DOWNTO 0) := to_signed(-36, 8); -- sfix8_En9
  CONSTANT coeff4                         : signed(7 DOWNTO 0) := to_signed(44, 8); -- sfix8_En9
  CONSTANT coeff5                         : signed(7 DOWNTO 0) := to_signed(52, 8); -- sfix8_En9
  CONSTANT coeff6                         : signed(7 DOWNTO 0) := to_signed(-58, 8); -- sfix8_En9
  CONSTANT coeff7                         : signed(7 DOWNTO 0) := to_signed(-62, 8); -- sfix8_En9
  CONSTANT coeff8                         : signed(7 DOWNTO 0) := to_signed(65, 8); -- sfix8_En9
  CONSTANT coeff9                         : signed(7 DOWNTO 0) := to_signed(65, 8); -- sfix8_En9
  CONSTANT coeff10                        : signed(7 DOWNTO 0) := to_signed(-62, 8); -- sfix8_En9
  CONSTANT coeff11                        : signed(7 DOWNTO 0) := to_signed(-58, 8); -- sfix8_En9
  CONSTANT coeff12                        : signed(7 DOWNTO 0) := to_signed(52, 8); -- sfix8_En9
  CONSTANT coeff13                        : signed(7 DOWNTO 0) := to_signed(44, 8); -- sfix8_En9
  CONSTANT coeff14                        : signed(7 DOWNTO 0) := to_signed(-36, 8); -- sfix8_En9
  CONSTANT coeff15                        : signed(7 DOWNTO 0) := to_signed(-27, 8); -- sfix8_En9
  CONSTANT coeff16                        : signed(7 DOWNTO 0) := to_signed(18, 8); -- sfix8_En9

  -- Signals
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 15); -- sfix8_En7
  SIGNAL product16                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp                         : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product15                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_1                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product14                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_2                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product13                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_3                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product12                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_4                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product11                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_5                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product10                        : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_6                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product9                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_7                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product8                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_8                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product7                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_9                       : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product6                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_10                      : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product5                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_11                      : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product4                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_12                      : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product3                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_13                      : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product2                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_14                      : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL product1_cast                    : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL product1                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp_15                      : signed(15 DOWNTO 0); -- sfix16_En16
  SIGNAL sum1                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp                         : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum2                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_1                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum3                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_2                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum4                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_3                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum5                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_4                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum6                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_5                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum7                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_6                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum8                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_7                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum9                             : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_8                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum10                            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_9                       : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum11                            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_10                      : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum12                            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_11                      : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum13                            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_12                      : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum14                            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_13                      : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL sum15                            : signed(17 DOWNTO 0); -- sfix18_En16
  SIGNAL add_temp_14                      : signed(18 DOWNTO 0); -- sfix19_En16
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 15) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 15) <= delay_pipeline(0 TO 14);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  mul_temp <= delay_pipeline(15) * coeff16;
  product16 <= resize(mul_temp(15 DOWNTO 1), 16);

  mul_temp_1 <= delay_pipeline(14) * coeff15;
  product15 <= resize(mul_temp_1(15 DOWNTO 1), 16);

  mul_temp_2 <= delay_pipeline(13) * coeff14;
  product14 <= resize(mul_temp_2(15 DOWNTO 1), 16);

  mul_temp_3 <= delay_pipeline(12) * coeff13;
  product13 <= resize(mul_temp_3(15 DOWNTO 1), 16);

  mul_temp_4 <= delay_pipeline(11) * coeff12;
  product12 <= resize(mul_temp_4(15 DOWNTO 1), 16);

  mul_temp_5 <= delay_pipeline(10) * coeff11;
  product11 <= resize(mul_temp_5(15 DOWNTO 1), 16);

  mul_temp_6 <= delay_pipeline(9) * coeff10;
  product10 <= resize(mul_temp_6(15 DOWNTO 1), 16);

  mul_temp_7 <= delay_pipeline(8) * coeff9;
  product9 <= resize(mul_temp_7(15 DOWNTO 1), 16);

  mul_temp_8 <= delay_pipeline(7) * coeff8;
  product8 <= resize(mul_temp_8(15 DOWNTO 1), 16);

  mul_temp_9 <= delay_pipeline(6) * coeff7;
  product7 <= resize(mul_temp_9(15 DOWNTO 1), 16);

  mul_temp_10 <= delay_pipeline(5) * coeff6;
  product6 <= resize(mul_temp_10(15 DOWNTO 1), 16);

  mul_temp_11 <= delay_pipeline(4) * coeff5;
  product5 <= resize(mul_temp_11(15 DOWNTO 1), 16);

  mul_temp_12 <= delay_pipeline(3) * coeff4;
  product4 <= resize(mul_temp_12(15 DOWNTO 1), 16);

  mul_temp_13 <= delay_pipeline(2) * coeff3;
  product3 <= resize(mul_temp_13(15 DOWNTO 1), 16);

  mul_temp_14 <= delay_pipeline(1) * coeff2;
  product2 <= resize(mul_temp_14(15 DOWNTO 1), 16);

  product1_cast <= resize(product1 & '0', 18);

  mul_temp_15 <= delay_pipeline(0) * coeff1;
  product1 <= resize(mul_temp_15(15 DOWNTO 1), 16);

  add_temp <= resize(product1_cast, 19) + resize(product2 & '0', 19);
  sum1 <= (17 => '0', OTHERS => '1') WHEN add_temp(18) = '0' AND add_temp(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp(18) = '1' AND add_temp(17) /= '1'
      ELSE (add_temp(17 DOWNTO 0));

  add_temp_1 <= resize(sum1, 19) + resize(product3 & '0', 19);
  sum2 <= (17 => '0', OTHERS => '1') WHEN add_temp_1(18) = '0' AND add_temp_1(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_1(18) = '1' AND add_temp_1(17) /= '1'
      ELSE (add_temp_1(17 DOWNTO 0));

  add_temp_2 <= resize(sum2, 19) + resize(product4 & '0', 19);
  sum3 <= (17 => '0', OTHERS => '1') WHEN add_temp_2(18) = '0' AND add_temp_2(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_2(18) = '1' AND add_temp_2(17) /= '1'
      ELSE (add_temp_2(17 DOWNTO 0));

  add_temp_3 <= resize(sum3, 19) + resize(product5 & '0', 19);
  sum4 <= (17 => '0', OTHERS => '1') WHEN add_temp_3(18) = '0' AND add_temp_3(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_3(18) = '1' AND add_temp_3(17) /= '1'
      ELSE (add_temp_3(17 DOWNTO 0));

  add_temp_4 <= resize(sum4, 19) + resize(product6 & '0', 19);
  sum5 <= (17 => '0', OTHERS => '1') WHEN add_temp_4(18) = '0' AND add_temp_4(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_4(18) = '1' AND add_temp_4(17) /= '1'
      ELSE (add_temp_4(17 DOWNTO 0));

  add_temp_5 <= resize(sum5, 19) + resize(product7 & '0', 19);
  sum6 <= (17 => '0', OTHERS => '1') WHEN add_temp_5(18) = '0' AND add_temp_5(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_5(18) = '1' AND add_temp_5(17) /= '1'
      ELSE (add_temp_5(17 DOWNTO 0));

  add_temp_6 <= resize(sum6, 19) + resize(product8 & '0', 19);
  sum7 <= (17 => '0', OTHERS => '1') WHEN add_temp_6(18) = '0' AND add_temp_6(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_6(18) = '1' AND add_temp_6(17) /= '1'
      ELSE (add_temp_6(17 DOWNTO 0));

  add_temp_7 <= resize(sum7, 19) + resize(product9 & '0', 19);
  sum8 <= (17 => '0', OTHERS => '1') WHEN add_temp_7(18) = '0' AND add_temp_7(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_7(18) = '1' AND add_temp_7(17) /= '1'
      ELSE (add_temp_7(17 DOWNTO 0));

  add_temp_8 <= resize(sum8, 19) + resize(product10 & '0', 19);
  sum9 <= (17 => '0', OTHERS => '1') WHEN add_temp_8(18) = '0' AND add_temp_8(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_8(18) = '1' AND add_temp_8(17) /= '1'
      ELSE (add_temp_8(17 DOWNTO 0));

  add_temp_9 <= resize(sum9, 19) + resize(product11 & '0', 19);
  sum10 <= (17 => '0', OTHERS => '1') WHEN add_temp_9(18) = '0' AND add_temp_9(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_9(18) = '1' AND add_temp_9(17) /= '1'
      ELSE (add_temp_9(17 DOWNTO 0));

  add_temp_10 <= resize(sum10, 19) + resize(product12 & '0', 19);
  sum11 <= (17 => '0', OTHERS => '1') WHEN add_temp_10(18) = '0' AND add_temp_10(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_10(18) = '1' AND add_temp_10(17) /= '1'
      ELSE (add_temp_10(17 DOWNTO 0));

  add_temp_11 <= resize(sum11, 19) + resize(product13 & '0', 19);
  sum12 <= (17 => '0', OTHERS => '1') WHEN add_temp_11(18) = '0' AND add_temp_11(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_11(18) = '1' AND add_temp_11(17) /= '1'
      ELSE (add_temp_11(17 DOWNTO 0));

  add_temp_12 <= resize(sum12, 19) + resize(product14 & '0', 19);
  sum13 <= (17 => '0', OTHERS => '1') WHEN add_temp_12(18) = '0' AND add_temp_12(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_12(18) = '1' AND add_temp_12(17) /= '1'
      ELSE (add_temp_12(17 DOWNTO 0));

  add_temp_13 <= resize(sum13, 19) + resize(product15 & '0', 19);
  sum14 <= (17 => '0', OTHERS => '1') WHEN add_temp_13(18) = '0' AND add_temp_13(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_13(18) = '1' AND add_temp_13(17) /= '1'
      ELSE (add_temp_13(17 DOWNTO 0));

  add_temp_14 <= resize(sum14, 19) + resize(product16 & '0', 19);
  sum15 <= (17 => '0', OTHERS => '1') WHEN add_temp_14(18) = '0' AND add_temp_14(17) /= '0'
      ELSE (17 => '1', OTHERS => '0') WHEN add_temp_14(18) = '1' AND add_temp_14(17) /= '1'
      ELSE (add_temp_14(17 DOWNTO 0));

  output_typeconvert <= (15 => '0', OTHERS => '1') WHEN sum15(17) = '0' AND sum15(16) /= '0'
      ELSE (15 => '1', OTHERS => '0') WHEN sum15(17) = '1' AND sum15(16) /= '1'
      ELSE (sum15(16 DOWNTO 1));

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;

